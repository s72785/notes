Abstract. A purely peer-to-peer version of \textbf{electronic cash} would allow online payments to be sent directly from one party to another without going through a financial institution. \textbf{Digital signature}s provide part of the solution, but the main benefits are lost if a \textbf{trust}ed third party is still required to prevent \textbf{double-spending}. We propose a solution to the \textbf{double-spending} problem using a \textbf{peer-to-peer network}. The network \textbf{timestamp}s transactions by \textbf{hash}ing them into an ongoing chain of \textbf{hash}-based \textbf{proof-of-work}, forming a record that cannot be changed without redoing the \textbf{proof-of-work}. The longest chain not only serves as proof of the sequence of events witnessed, but proof that it came from the largest pool of CPU power. As long as a majority of CPU power is controlled by \textbf{node}s that are not cooperating to attack the network, they'll generate the longest chain and outpace attackers. The network itself requires minimal structure. Messages are broadcast on a \textbf{best effort} basis, and \textbf{node}s can leave and rejoin the network at will, accepting the longest \textbf{proof-of-work} chain as proof of what happened while they were gone.

\begin{enumerate}

\item Introduction

Commerce on the Internet has come to rely almost exclusively on financial institutions serving as \textbf{trust}ed third parties to process electronic payments. While the system works well enough for most transactions, it still suffers from the \textbf{inherent} weaknesses of the \textbf{trust} based model. Completely non-\textbf{reversible} transactions are not really possible, since financial institutions cannot avoid \textbf{mediating} \textbf{disputes}. The cost of mediation increases \textbf{transaction} costs, limiting the minimum practical \textbf{transaction} size and \textbf{cutting off} the possibility for small casual transactions, and there is a broader cost in the loss of ability to make non-\textbf{reversible} payments for non-\textbf{reversible} services. With the possibility of reversal, the need for \textbf{trust} spreads. Merchants must be wary of their customers, hassling them for more information than they would otherwise need. A certain percentage of \textbf{fraud} is accepted as unavoidable. These costs and payment uncertainties can be avoided in person by using physical currency, but no mechanism exists to make payments over a communications channel without a \textbf{trust}ed party.

What is needed is an electronic payment system based on cryptographic proof instead of \textbf{trust}, allowing any two willing parties to transact directly with each other without the need for a \textbf{trust}ed third party. Transactions that are computationally impractical to reverse would protect sellers from \textbf{fraud}, and routine escrow mechanisms could easily be implemented to protect buyers. In this paper, we propose a solution to the \textbf{double-spending} problem using a peer-to-peer \textbf{distribute}d \textbf{timestamp} server to generate computational proof of the chronological order of transactions. The system is secure as long as honest \textbf{node}s collectively control more CPU power than any cooperating group of attacker \textbf{node}s.

\item Transactions

We define an electronic coin as a chain of \textbf{digital signature}s. Each owner transfers the coin to the next by digitally signing a \textbf{hash} of the previous \textbf{transaction} and the public \textbf{key} of the next owner and adding these to the end of the coin. A \textbf{payee} can verify the signatures to verify the chain of ownership.

The problem of course is the \textbf{payee} can't verify that one of the owners did not double-spend the coin. A common solution is to introduce a \textbf{trust}ed central \textbf{authority}, or \textbf{mint}, that checks every \textbf{transaction} for double spending. After each \textbf{transaction}, the coin must be returned to the \textbf{mint} to issue a new coin, and only coins issued directly from the \textbf{mint} are \textbf{trust}ed not to be double-spent. The problem with this solution is that the \textbf{fate} of the entire money system depends on the company running the \textbf{mint}, with every \textbf{transaction} having to go through them, just like a bank.

We need a way for the \textbf{payee} to know that the previous owners did not sign any earlier transactions. For our purposes, the earliest \textbf{transaction} is the one that counts, so we don't care about later attempts to double-spend. The only way to confirm the absence of a \textbf{transaction} is to be aware of all transactions. In the \textbf{mint} based model, the \textbf{mint} was aware of all transactions and decided which arrived first. To accomplish this without a \textbf{trust}ed party, transactions must be publicly announced [1], and we need a system for participants to agree on a single history of the order in which they were received. The \textbf{payee} needs proof that at the time of each \textbf{transaction}, the majority of \textbf{node}s agreed it was the first received.

\item Timestamp Server

The solution we propose begins with a \textbf{timestamp} server. A \textbf{timestamp} server works by taking a \textbf{hash} of a block of items to be \textbf{timestamp}ed and widely publishing the \textbf{hash}, such as in a newspaper or Usenet post [2-5]. The \textbf{timestamp} proves that the data must have existed at the time, obviously, in order to get into the \textbf{hash}. Each \textbf{timestamp} includes the previous \textbf{timestamp} in its \textbf{hash}, forming a chain, with each additional \textbf{timestamp} reinforcing the ones before it.

\item Proof-of-Work

To implement a \textbf{distribute}d \textbf{timestamp} server on a peer-to-peer basis, we will need to use a \textbf{proof-of-work} system similar to Adam Back's Hashcash [6], rather than newspaper or Usenet posts. The \textbf{proof-of-work} involves scanning for a value that when \textbf{hash}ed, such as with SHA-256, the \textbf{hash} begins with a number of zero bits. The average work required is exponential in the number of zero bits required and can be verified by executing a single \textbf{hash}.

For our \textbf{timestamp} network, we implement the \textbf{proof-of-work} by incrementing a nonce in the block until a value is found that gives the block's \textbf{hash} the required zero bits. Once the CPU effort has been expended to make it satisfy the \textbf{proof-of-work}, the block cannot be changed without redoing the work. As later blocks are chained after it, the work to change the block would include redoing all the blocks after it.

The \textbf{proof-of-work} also solves the problem of determining representation in majority decision making. If the majority were based on one-IP-address-one-vote, it could be subverted by anyone able to allocate many IPs. Proof-of-work is essentially one-CPU-one-vote. The majority decision is represented by the longest chain, which has the greatest \textbf{proof-of-work} effort invested in it. If a majority of CPU power is controlled by honest \textbf{node}s, the honest chain will grow the fastest and outpace any competing chains. To modify a past block, an attacker would have to redo the \textbf{proof-of-work} of the block and all blocks after it and then catch up with and surpass the work of the honest \textbf{node}s. We will show later that the probability of a slower attacker catching up diminishes exponentially as subsequent blocks are added.

To compensate for increasing hardware speed and varying interest in running \textbf{node}s over time, the \textbf{proof-of-work} difficulty is determined by a moving average targeting an average number of blocks per hour. If they're generated too fast, the difficulty increases.

\item Network

The steps to run the network are as follows:

\begin{enumerate}
\item New transactions are broadcast to all \textbf{node}s.
\item Each \textbf{node} collects new transactions into a block.
\item Each \textbf{node} works on finding a difficult \textbf{proof-of-work} for its block.
\item When a \textbf{node} finds a \textbf{proof-of-work}, it broadcasts the block to all \textbf{node}s.
\item Nodes accept the block only if all transactions in it are valid and not already spent.
\item Nodes express their acceptance of the block by working on creating the next block in the
chain, using the \textbf{hash} of the accepted block as the previous \textbf{hash}.
\end{enumerate}

Nodes always consider the longest chain to be the correct one and will keep working on
extending it. If two \textbf{node}s broadcast different versions of the next block simultaneously, some
\textbf{node}s may receive one or the other first. In that case, they work on the first one they received,
but save the other branch in case it becomes longer. The tie will be broken when the next proof-
of-work is found and one branch becomes longer; the \textbf{node}s that were working on the other
branch will then switch to the longer one.

New \textbf{transaction} broadcasts do not necessarily need to reach all \textbf{node}s. As long as they reach
many \textbf{node}s, they will get into a block before long. Block broadcasts are also tolerant of dropped
messages. If a \textbf{node} does not receive a block, it will request it when it receives the next block and
realizes it missed one.

\item Incentive

By convention, the first \textbf{transaction} in a block is a special \textbf{transaction} that starts a new coin owned
by the creator of the block. This adds an incentive for \textbf{node}s to support the network, and provides
a way to initially \textbf{distribute} coins into circulation, since there is no central \textbf{authority} to issue them.
The steady addition of a constant of amount of new coins is analogous to gold miners expending
resources to add gold to circulation. In our case, it is CPU time and electricity that is expended.
The incentive can also be funded with \textbf{transaction} fees. If the output value of a \textbf{transaction} is
less than its input value, the difference is a \textbf{transaction} fee that is added to the incentive value of
the block containing the \textbf{transaction}. Once a predetermined number of coins have entered
circulation, the incentive can transition entirely to \textbf{transaction} fees and be completely inflation
free.
The incentive may help encourage \textbf{node}s to stay honest. If a greedy attacker is able to
assemble more CPU power than all the honest \textbf{node}s, he would have to choose between using it
to de\textbf{fraud} people by stealing back his payments, or using it to generate new coins. He ought to
find it more profitable to play by the rules, such rules that favour him with more new coins than
everyone else combined, than to undermine the system and the validity of his own wealth.

\item Reclaiming Disk Space

Once the latest \textbf{transaction} in a coin is buried under enough blocks, the spent transactions before
it can be discarded to save disk space. To facilitate this without breaking the block's \textbf{hash},
transactions are \textbf{hash}ed in a Merkle Tree [7][2][5], with only the root included in the block's \textbf{hash}.
Old blocks can then be compacted by stubbing off branches of the tree. The interior \textbf{hash}es do
not need to be stored.

A block header with no transactions would be about 80 bytes. If we suppose blocks are
generated every 10 minutes, 80 bytes * 6 * 24 * 365 = 4.2MB per year. With computer systems
typically selling with 2GB of RAM as of 2008, and Moore's Law predicting current growth of
1.2GB per year, storage should not be a problem even if the block headers must be kept in
memory.

\item Simplified Payment Verification

It is possible to verify payments without running a full network \textbf{node}. A user only needs to keep
a copy of the block headers of the longest \textbf{proof-of-work} chain, which he can get by querying
network \textbf{node}s until he's convinced he has the longest chain, and obtain the Merkle branch
linking the \textbf{transaction} to the block it's \textbf{timestamp}ed in. He can't check the \textbf{transaction} for
himself, but by linking it to a place in the chain, he can see that a network \textbf{node} has accepted it,
and blocks added after it further confirm the network has accepted it.

As such, the verification is reliable as long as honest \textbf{node}s control the network, but is more
vulnerable if the network is overpowered by an attacker. While network \textbf{node}s can verify
transactions for themselves, the simplified method can be fooled by an attacker's fabricated
transactions for as long as the attacker can continue to overpower the network. One strategy to
protect against this would be to accept alerts from network \textbf{node}s when they detect an invalid
block, prompting the user's software to download the full block and alerted transactions to
confirm the inconsistency. Businesses that receive frequent payments will probably still want to
run their own \textbf{node}s for more independent security and quicker verification.

\item Combining and Splitting Value

Although it would be possible to handle coins individually, it would be unwieldy to make a
separate \textbf{transaction} for every cent in a transfer. To allow value to be split and combined,
transactions contain multiple inputs and outputs. Normally there will be either a single input
from a larger previous \textbf{transaction} or multiple inputs combining smaller amounts, and at most two
outputs: one for the payment, and one returning the change, if any, back to the sender.

It should be noted that fan-out, where a \textbf{transaction} depends on several transactions, and those
transactions depend on many more, is not a problem here. There is never the need to extract a
complete standalone copy of a \textbf{transaction}'s history.

\item  Privacy

The traditional banking model achieves a level of privacy by limiting access to information to the
parties involved and the \textbf{trust}ed third party. The necessity to announce all transactions publicly
precludes this method, but privacy can still be maintained by breaking the flow of information in
another place: by keeping public \textbf{key}s anonymous. The public can see that someone is sending
an amount to someone else, but without information linking the \textbf{transaction} to anyone. This is
similar to the level of information released by stock exchanges, where the time and size of
individual trades, the "tape", is made public, but without telling who the parties were.

As an additional firewall, a new \textbf{key} pair should be used for each \textbf{transaction} to keep them
from being linked to a common owner. Some linking is still unavoidable with multi-input
transactions, which necessarily reveal that their inputs were owned by the same owner. The risk
is that if the owner of a \textbf{key} is revealed, linking could reveal other transactions that belonged to
the same owner.

\item  Calculations

We consider the scenario of an attacker trying to generate an alternate chain faster than the honest
chain. Even if this is accomplished, it does not throw the system open to arbitrary changes, such
as creating value out of thin air or taking money that never belonged to the attacker. Nodes are
not going to accept an invalid \textbf{transaction} as payment, and honest \textbf{node}s will never accept a block
containing them. An attacker can only try to change one of his own transactions to take back
money he recently spent.
The race between the honest chain and an attacker chain can be characterized as a Binomial
Random Walk. The success event is the honest chain being extended by one block, increasing its
lead by +1, and the failure event is the attacker's chain being extended by one block, reducing the
gap by -1.
The probability of an attacker catching up from a given deficit is analogous to a Gambler's
Ruin problem. Suppose a gambler with unlimited credit starts at a deficit and plays potentially an
infinite number of trials to try to reach breakeven. We can calculate the probability he ever
reaches breakeven, or that an attacker ever catches up with the honest chain, as follows [8]:

Given our assumption that p > q, the probability drops exponentially as the number of blocks the
attacker has to catch up with increases. With the odds against him, if he doesn't make a lucky
lunge forward early on, his chances become vanishingly small as he falls further behind.

We now consider how long the recipient of a new \textbf{transaction} needs to wait before being
sufficiently certain the sender can't change the \textbf{transaction}. We assume the sender is an attacker
who wants to make the recipient believe he paid him for a while, then switch it to pay back to
himself after some time has passed. The receiver will be alerted when that happens, but the
sender hopes it will be too late.

The receiver generates a new \textbf{key} pair and gives the public \textbf{key} to the sender shortly before
signing. This prevents the sender from preparing a chain of blocks ahead of time by working on
it continuously until he is lucky enough to get far enough ahead, then executing the \textbf{transaction} at
that moment. Once the \textbf{transaction} is sent, the dishonest sender starts working in secret on a
parallel chain containing an alternate version of his \textbf{transaction}.

The recipient waits until the \textbf{transaction} has been added to a block and z blocks have been
linked after it. He doesn't know the exact amount of progress the attacker has made, but
assuming the honest blocks took the average expected time per block, the attacker's potential
progress will be a Poisson distribution with expected value:

To get the probability the attacker could still catch up now, we multiply the Poisson density for
each amount of progress he could have made by the probability he could catch up from that point:

Rearranging to avoid summing the infinite tail of the distribution...

\item Conclusion

We have proposed a system for electronic transactions without relying on \textbf{trust}. We started with
the usual \textbf{framework} of coins made from \textbf{digital signature}s, which provides strong control of
ownership, but is incomplete without a way to prevent \textbf{double-spending}. To solve this, we
proposed a \textbf{peer-to-peer network} using \textbf{proof-of-work} to record a public history of transactions
that quickly becomes computationally impractical for an attacker to change if honest \textbf{node}s
control a majority of CPU power. The network is robust in its unstructured simplicity. Nodes
work all at once with little coordination. They do not need to be identified, since messages are
not routed to any particular place and only need to be delivered on a \textbf{best effort} basis. Nodes can
leave and rejoin the network at will, accepting the \textbf{proof-of-work} chain as proof of what
happened while they were gone. They vote with their CPU power, expressing their acceptance of
valid blocks by working on extending them and rejecting invalid blocks by refusing to work on
them. Any needed rules and incentives can be enforced with this consensus mechanism.
